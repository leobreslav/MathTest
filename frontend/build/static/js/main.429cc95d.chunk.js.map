{"version":3,"sources":["models/Task.js","models/Set.js","models/Users.js","models/Urlstest.js","serviceWorker.js","index.js"],"names":["Task","props","state","data","id","isLoading","xhr","XMLHttpRequest","open","this","send","setState","onreadystatechange","readyState","status","console","log","statusText","JSON","parse","response","map","item","key","problem","length","substring","className","renderProducts","React","Component","Set","name","Users","username","testurl","to","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","Urlstest","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.429cc95d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Task extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [],\r\n            id: props.id,\r\n            isLoading: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open('GET', `/api/problem_heads/${this.state.id}`, true);\r\n        xhr.send();\r\n        this.setState({isLoading: true});\r\n\r\n        xhr.onreadystatechange = () => {\r\n            if (xhr.readyState !== 4) {\r\n                return false\r\n            }\r\n\r\n            if (xhr.status !== 200) {\r\n                console.log(xhr.status + ': ' + xhr.statusText)\r\n            } else {\r\n                console.log(xhr);\r\n                this.setState({\r\n                    data: JSON.parse(xhr.response),\r\n                    isLoading: false,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    renderProducts() {\r\n        const {data, isLoading} = this.state;\r\n        if (isLoading) {\r\n            return <div> Загрузка!!!!</div>\r\n        } else {\r\n            return data.map(item => {\r\n                return <li key={item} > {(item.problem.length > 20? item.problem.substring(0, 19) + \"...\" : item.problem)}</li>\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='App'>\r\n                <div className='product-list'>\r\n                    {this.renderProducts()}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Task;\r\n","import React from 'react';\r\nimport Task from \"./Task\";\r\nclass Set extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [],\r\n            isLoading: false,\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open('GET', '/api/problem_prototypes', true);\r\n        xhr.send();\r\n        this.setState({ isLoading: true });\r\n\r\n        xhr.onreadystatechange = () => {\r\n            if (xhr.readyState !== 4) {\r\n                return false\r\n            }\r\n\r\n            if (xhr.status !== 200) {\r\n                console.log(xhr.status + ': ' + xhr.statusText)\r\n            } else {\r\n                console.log(xhr);\r\n                this.setState({\r\n                    data: JSON.parse(xhr.response),\r\n                    isLoading: false,\r\n                })\r\n            }\r\n        }\r\n    }\r\n    renderProducts() {\r\n        const { data, isLoading } = this.state;\r\n        if (isLoading) {\r\n            return <div> Загрузка!!!!</div>\r\n        } else {\r\n            return data.map(item => {\r\n                return (\r\n                    <li><div>{item.name}</div><ul><Task id = {item.id}/></ul></li>\r\n                );\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='App'>\r\n                <div className='product-list'>\r\n                    {this.renderProducts()}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Set;\r\n","import React from 'react';\r\nclass Users extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [],\r\n            isLoading: false,\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open('GET', '/api/users', true);\r\n        xhr.send();\r\n        this.setState({ isLoading: true });\r\n\r\n        xhr.onreadystatechange = () => {\r\n            if (xhr.readyState !== 4) {\r\n                return false\r\n            }\r\n\r\n            if (xhr.status !== 200) {\r\n                console.log(xhr.status + ': ' + xhr.statusText)\r\n            } else {\r\n                console.log(xhr);\r\n                this.setState({\r\n                    data: JSON.parse(xhr.response),\r\n                    isLoading: false,\r\n                })\r\n            }\r\n        }\r\n    }\r\n    renderProducts() {\r\n        const { data, isLoading } = this.state;\r\n        if (isLoading) {\r\n            return <div> Загрузка!!!!</div>\r\n        } else {\r\n            return data.map(item => {\r\n                return (\r\n                    <li>{item.username}</li>\r\n                );\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='App'>\r\n                <div className='product-list'>\r\n                    {this.renderProducts()}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Users;\r\n","import React from 'react';\r\nimport Set from \"./Set\";\r\nimport Users from \"./Users\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\nlet testurl = () => {\r\n    return (\r\n        <Router>\r\n            <div>\r\n                <nav>\r\n                    <ul>\r\n                        <li>\r\n                            <Link to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/sets\">Sets</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/users\">Users</Link>\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n\r\n                {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n                <Switch>\r\n                    <Route path=\"/sets\">\r\n                        <ul>\r\n                        <Set/>\r\n                        </ul>\r\n                    </Route>\r\n                    <Route path=\"/users\">\r\n                        <ul>\r\n                        <Users />\r\n                        </ul>\r\n                    </Route>\r\n                    <Route path=\"/\">\r\n                        :)\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        </Router>);\r\n};\r\n\r\nexport default testurl;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Urlstest from './models/Urlstest';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n\r\n  <React.StrictMode>\r\n    <Urlstest />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}